import { IQueryHandler, QueryHandler } from '@nestjs/cqrs';
import { RequestResetPasswordQuery } from './request-reset-password.query';
import { Logger } from '@nestjs/common';
import { BankDetailId } from './../../../domain/value-objects/bank-detail-id';
import { Bank } from './../../../domain/entities/bank';
import { BankId } from './../../../domain/value-objects/bank-id';
import { PhoneNumber } from './../../../domain/value-objects/phone-number';
import { CommandHandler, EventBus, ICommandHandler } from '@nestjs/cqrs';
import { TaxPayer } from 'src/user/core/domain/entities/tax-payer';
import { randomUUID } from 'crypto';
import { TaxCode } from 'src/user/core/domain/value-objects/tax-code';
import { Email } from '@vuvannghia/common';
import { TaxOfficeId } from 'src/user/core/domain/value-objects/tax-office-id';
import { BankDetail } from 'src/user/core/domain/entities/bank-detail';
import { Address } from 'src/user/core/domain/entities/address';
import { AddressId } from 'src/user/core/domain/value-objects/address-id';
import { WardId } from 'src/user/core/domain/value-objects/ward-id';
import { TaxPayerException } from 'src/user/core/domain/exceptions/tax-payer.exception';

import { TaxPayerRepositoryPort } from '../../ports/dataaccess/repositories/tax-payer.repository.port';
import { TaxOfficeRepositoryPort } from '../../ports/dataaccess/repositories/tax-office.repository.port';
import { BankRepositoryPort } from '../../ports/dataaccess/repositories/bank.repository.port';
import { WardRepositoryPort } from '../../ports/dataaccess/repositories/ward.repository.port';
import { BankDetailRepositoryPort } from '../../ports/dataaccess/repositories/bank-detail.repository.port';
import { AddressRepositoryPort } from '../../ports/dataaccess/repositories/address.repository.port';

import { TaxPayerStatus } from '@vuvannghia/common';
import { TaxPayerRegisteredEvent } from 'src/user/core/domain/events/tax-payer-registered.event';
import { JwtService } from '@nestjs/jwt';
import { HashPasswordService } from '../../../domain/services/hash-password.service';

import { EventsHandler, IEventHandler } from '@nestjs/cqrs';
import { MailerPort } from '../../ports/mailer/mailer.port';
import { EncryptionEmailService } from '../../../domain/services/encryption-email.service';

@QueryHandler(RequestResetPasswordQuery)
export class RequestResetPasswordQueryHandler
  implements IQueryHandler<RequestResetPasswordQuery>
{
  private readonly logger = new Logger(RequestResetPasswordQueryHandler.name);

  constructor(
    private readonly HashPasswordService: HashPasswordService,
    private readonly eventBus: EventBus,
    private readonly TaxPayerRepository: TaxPayerRepositoryPort,
    private readonly TaxOfficeRepository: TaxOfficeRepositoryPort,
    private readonly BankRepository: BankRepositoryPort,
    private readonly WardRepository: WardRepositoryPort,
    private readonly BankDetailRepository: BankDetailRepositoryPort,
    private readonly AddressRepository: AddressRepositoryPort,
    private readonly EncryptionEmailService: EncryptionEmailService,
    private readonly mailerPort: MailerPort,
  ) {}

  public async execute(payload: RequestResetPasswordQuery) {
    try {
      this.logger.debug(
        `> RequestResetPasswordQuery: ${JSON.stringify(payload)}`,
      );

      console.log('üöÄ ~ execute ~ payload:', payload.email);

      const existingEmail = await this.TaxPayerRepository.getOneByEmail(
        new Email(payload.email),
      );
      if (!existingEmail) {
        throw new TaxPayerException('Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi n·ªôp thu·∫ø.');
      }

      const tokenPassword = this.EncryptionEmailService.encrypt(
        payload.email + ' ' + new Date().toISOString(),
        process.env.VERIFY_RESET_PASSWORD_SECRET,
      );

      this.mailerPort.send(
        new Email(payload.email),
        'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u',
        `
 <h1>Xin ch√†o <strong>${existingEmail.name}</strong>,</h1>
 <p>Ch√∫ng t√¥i nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu kh√¥i ph·ª•c m·∫≠t kh·∫©u t·ª´ b·∫°n.</p>


<br />


<p>Vui l√≤ng nh·∫•n v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ kh√¥i ph·ª•c m·∫≠t kh·∫©u.</p>

 


<br />


<a style=" background-color: #04aa6d;
 color: white;
 padding: 10px;
 text-decoration: none;
 border-radius: 12px; "
 href="${process.env.APP_DOMAIN}:${process.env.APP_PORT}/api/user/verify-reset-password/${tokenPassword}" target="_blank" >
 &#128073; ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u </a >

 <br />

 <p>
 N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu vi·ªác kh√¥i ph·ª•c m·∫≠t kh·∫©u ho·∫∑c kh√¥ng nh·ªõ ƒë√£ th·ª±c hi·ªán y√™u
 c·∫ßu n√†y, xin vui l√≤ng b·ªè qua email n√†y ho·∫∑c li√™n h·ªá v·ªõi ch√∫ng t√¥i ngay ƒë·ªÉ
 ch√∫ng t√¥i c√≥ th·ªÉ gi√∫p b·∫°n gi·∫£i quy·∫øt t√¨nh hu·ªëng n√†y.
</p>


 
 



 <br />
<p>Tr√¢n tr·ªçng,</p>
<p><strong> V≈© VƒÉn Nghƒ©a </strong></p>
<p><strong> MSSV: 20206205 </strong></p>
`,
      );

      this.logger.log(
        `> G·ª≠i ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u: ${JSON.stringify(payload.email)}`,
      );

      return {
        message: 'Y√™u c·∫ßu qu√™n m·∫≠t kh·∫©u th√†nh c√¥ng. H√£y ki·ªÉm tra email.',
      };
    } catch (error) {
      return { message: error.message };
    }
  }
}
